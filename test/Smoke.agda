{-# OPTIONS --safe #-}
module Smoke where

open import Prim.Interval
open import Prim.Kan
open import Prim.Type

open import Notation.Associativity
open import Notation.Base
open import Notation.Composition
open import Notation.Double.Base
open import Notation.Double.Composition
open import Notation.Double.Interchange
open import Notation.Double.Reflexivity
open import Notation.Reflexivity
open import Notation.Strict
open import Notation.Unitality.Inner
open import Notation.Unitality.Outer

open import Foundations.Sigma.Base
open import Foundations.Path.Interface
open import Foundations.Pi.Interface

module _ {‚Ñìa : Level} {A : Type ‚Ñìa} where
  Squares : ‚Ñöuiver-on (Œª _ ‚Üí A) _
  Squares .‚Ñöuiver-on.Quiver‚Çï = Paths A
  Squares .‚Ñöuiver-on.Quiver·µ• = Paths A
  Squares .‚Ñöuiver-on.Sq p q r s = Path·¥æ (Œª i ‚Üí q i Ôºù r i) p s

  instance
    sqre : ‚Ñùefl Squares lzero lzero
    sqre .‚Ñùefl.refl‚Çï {f} i _ = f i
    sqre .‚Ñùefl.refl·µ• {f} _ j = f j

module _ {‚Ñìa : Level} {A : Type ‚Ñìa} {x y : A} {p : x Ôºù y} where
  zook : Path·¥æ (Œª i ‚Üí p i Ôºù p i) refl refl
  zook = refl‚Çï

  kooz : p Ôºù p
  kooz = refl·µ•

open import Prim.Data.Sigma
Rels : (‚Ñì : Level) ‚Üí Quiver-on (Œª _ ‚Üí Type ‚Ñì) _
Rels ‚Ñì .Quiver-on.Hom X Y = Œ£ (Type ‚Ñì) Œª S ‚Üí (S ‚Üí X) √ó (S ‚Üí Y)

-- open import Prim.Equiv
-- instance
--   Rels-Comp : ‚àÄ{‚Ñì} ‚Üí Comp _ (Rels ‚Ñì)
--   Rels-Comp {‚Ñì} .Comp._‚àô_ (R , f , g) (S , h , k) = (Œ£ R (Œª _ ‚Üí S)) , (Œª x‚ÇÅ ‚Üí f (x‚ÇÅ .fst)) , Œª z‚ÇÅ ‚Üí k (z‚ÇÅ .snd)

--   Rels-Assoc : ‚àÄ{‚Ñì} ‚Üí Assoc (Rels ‚Ñì) Œª A B ‚Üí Lift _ {!!}
--   Rels-Assoc .Assoc.assoc f g h .lower = {!!}

module _ where private
  open Quiver-on Funs

  open import Prim.Data.Unit
  kek : Hom ‚ä§ Type‚ÇÉ
  kek tt = Type‚ÇÇ

  lol : {‚Ñì : Level} ‚Üí Hom ‚ä§ (Type ‚Ñì)
  lol _ = Lift _ ‚ä§

-- module _ {‚Ñì-ob : Level ‚Üí Level} {Ob : ob-sig ‚Ñì-ob} (C : Quiver-on Ob) ‚¶É _ : Comp C ‚¶Ñ where private
--   open Quiver-on C

--   Sqq : ‚Ñöuiver-on Ob
--   Sqq = ?
--   -- Sqq .‚Ñöuiver-on.‚Ñì-sq = _
--   -- Sqq .‚Ñöuiver-on.Quiver‚Çï = C
--   -- Sqq .‚Ñöuiver-on.Quiver·µ• = C
--   -- Sqq .‚Ñöuiver-on.Hom‚ñ° f g h k = f ‚àô h Ôºù g ‚àô k

module DoubleCat {‚Ñì-ob : ‚Ñì-ob-sig} {Ob : ob-sig ‚Ñì-ob} {‚Ñì-sq : ‚Ñì-sq-sig }(C : ‚Ñöuiver-on Ob ‚Ñì-sq) where private
  open ‚Ñöuiver-on C

  record WildPseudoDoubleCat : Typeœâ where
    no-eta-equality
    field
      r·µ• : Reflœâ Quiver·µ•
      c·µ• : Compœâ Quiver·µ•
      unit-l·µ• : ‚àÄ{‚Ñìx ‚Ñìy} ‚Üí Unit-i Quiver·µ• Strict ‚Ñìx ‚Ñìy ‚¶É r·µ• ‚¶Ñ ‚¶É c·µ• ‚¶Ñ
      unit-r·µ• : ‚àÄ{‚Ñìx ‚Ñìy} ‚Üí Unit-o Quiver·µ• Strict ‚Ñìx ‚Ñìy ‚¶É r·µ• ‚¶Ñ ‚¶É c·µ• ‚¶Ñ
      assoc·µ• : {‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz : Level} ‚Üí Assoc Quiver·µ• Strict ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz ‚¶É c·µ• ‚¶Ñ ‚¶É c·µ• ‚¶Ñ ‚¶É c·µ• ‚¶Ñ ‚¶É c·µ• ‚¶Ñ

      r‚Çï : Reflœâ Quiver‚Çï
      c‚Çï : Compœâ Quiver‚Çï
      Œª‚Çï : ‚àÄ{‚Ñìx ‚Ñìy} ‚Üí Unit-i Quiver‚Çï (mk-2-quiver Œª x y ‚Üí mk-quiver (Œª f g ‚Üí Sq f (refl ‚¶É r·µ• ‚¶Ñ) (refl ‚¶É  r·µ• ‚¶Ñ) g)) ‚Ñìx ‚Ñìy ‚¶É r‚Çï ‚¶Ñ ‚¶É c‚Çï ‚¶Ñ
      œÅ‚Çï : ‚àÄ{‚Ñìx ‚Ñìy} ‚Üí Unit-o Quiver‚Çï (mk-2-quiver Œª x y ‚Üí mk-quiver (Œª f g ‚Üí Sq f (refl ‚¶É r·µ• ‚¶Ñ) (refl ‚¶É  r·µ• ‚¶Ñ) g)) ‚Ñìx ‚Ñìy ‚¶É r‚Çï ‚¶Ñ ‚¶É c‚Çï ‚¶Ñ
      Œ±‚Çï : ‚àÄ{‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz} ‚Üí Assoc Quiver‚Çï (mk-2-quiver Œª x y ‚Üí mk-quiver (Œª f g ‚Üí Sq f (refl ‚¶É r·µ• ‚¶Ñ) (refl ‚¶É r·µ• ‚¶Ñ) g)) ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz ‚¶É c‚Çï ‚¶Ñ ‚¶É c‚Çï ‚¶Ñ ‚¶É c‚Çï ‚¶Ñ ‚¶É c‚Çï ‚¶Ñ

      r‚ñ°  : ‚àÄ{‚Ñìx ‚Ñìy} ‚Üí ‚Ñùefl C ‚Ñìx ‚Ñìy ‚¶É r‚Çï ‚¶Ñ ‚¶É r‚Çï ‚¶Ñ ‚¶É r·µ• ‚¶Ñ ‚¶É r·µ• ‚¶Ñ
      c‚ñ°  : ‚àÄ{‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz ‚Ñìu ‚Ñìv} ‚Üí ‚ÑÇomp C ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz ‚Ñìu ‚Ñìv ‚¶É c‚Çï ‚¶Ñ ‚¶É c·µ• ‚¶Ñ
      ic‚ñ° : ùïÄnterchange C ‚¶É c‚Çï ‚¶Ñ ‚¶É c·µ• ‚¶Ñ ‚¶É c‚ñ° ‚¶Ñ _Ôºù_
