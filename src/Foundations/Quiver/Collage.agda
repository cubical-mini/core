{-# OPTIONS --safe #-}
module Foundations.Quiver.Collage where

open import Foundations.Quiver.Base
open import Foundations.Quiver.Interval.Base
open import Foundations.Quiver.Total.Base

module _ {m} {‚Ñì-ob‚Åª ‚Ñì-ob‚Å∫ : ‚Ñì-sig 1 (m , _)} (Ob‚Åª : ob-sig ‚Ñì-ob‚Åª) (Ob‚Å∫ : ob-sig ‚Ñì-ob‚Å∫) where
  Choose : Bool ‚Üí ob-sig (Œª ls ‚Üí ‚Ñì-ob‚Åª ls ‚äî ‚Ñì-ob‚Å∫ ls)
  Choose false ls = Lift (‚Ñì-ob‚Å∫ ls) (Ob‚Åª ls)
  Choose true  ls = Lift (‚Ñì-ob‚Åª ls) (Ob‚Å∫ ls)

  Arrows : ‚àÄ ‚Ñì-het ‚Üí Typeœâ
  Arrows ‚Ñì-het = HQuiver-onœâ·µà ùêº m Choose Œª _ _ ‚Üí ‚Ñì-het

module _ {m} {‚Ñì-ob‚Åª ‚Ñì-ob‚Å∫ : ‚Ñì-sig 1 (m , _)} {Ob‚Åª : ob-sig ‚Ñì-ob‚Åª} {Ob‚Å∫ : ob-sig ‚Ñì-ob‚Å∫}
  {‚Ñì-het} (D : Arrows Ob‚Åª Ob‚Å∫ ‚Ñì-het) where
  Cograph : HQuiver-onœâ m _ _
  Cograph = Œ£[ D ]

module _ {m ‚Ñì-ob‚Åª ‚Ñì-ob‚Å∫ ‚Ñì-hom‚Åª ‚Ñì-hom‚Å∫}
  {Ob‚Åª : ob-sig ‚Ñì-ob‚Åª} (A : HQuiver-onœâ m Ob‚Åª ‚Ñì-hom‚Åª)
  (let module A = Quiver-onœâ A renaming (Het to Hom))
  {Ob‚Å∫ : ob-sig ‚Ñì-ob‚Å∫} (B : HQuiver-onœâ m Ob‚Å∫ ‚Ñì-hom‚Å∫)
  (let module B = Quiver-onœâ B renaming (Het to Hom))
  (C : Quiver-onœâ m Ob‚Åª m Ob‚Å∫ (Œª lxs lys ‚Üí ‚Ñì-hom‚Åª lxs lys ‚äî ‚Ñì-hom‚Å∫ lxs lys)) (let module C = Quiver-onœâ C) where

  Disp‚Üí : Arrows Ob‚Åª Ob‚Å∫ (Œª lxs lys ‚Üí ‚Ñì-hom‚Åª lxs lys ‚äî ‚Ñì-hom‚Å∫ lxs lys)
  Disp‚Üí .Quiver-onœâ·µà.Het[_] {x = false} {y = false} _ {lxs·µà} {lys·µà} (lift x‚Åª) (lift y‚Åª) = Lift (‚Ñì-hom‚Å∫ lxs·µà lys·µà) (A.Hom x‚Åª y‚Åª)
  Disp‚Üí .Quiver-onœâ·µà.Het[_] {x = false} {y = true}  _ (lift x‚Åª) (lift y‚Å∫) = C.Het x‚Åª y‚Å∫
  Disp‚Üí .Quiver-onœâ·µà.Het[_] {x = true}  {y = true}  _ {lxs·µà} {lys·µà} (lift x‚Å∫) (lift y‚Å∫) = Lift (‚Ñì-hom‚Åª lxs·µà lys·µà) (B.Hom x‚Å∫ y‚Å∫)
