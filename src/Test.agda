{-# OPTIONS --safe --default-level #-}
module Test where

open import Prim.Interval
open import Prim.Kan
open import Prim.Type

open import Notation.Associativity
open import Notation.Composition
open import Notation.Double.Composition
open import Notation.Double.Interchange
open import Notation.Double.Quiver
open import Notation.Quiver
open import Notation.Reflexivity
open import Notation.Double.Reflexivity
open import Notation.Unitality.Inner
open import Notation.Unitality.Outer

module _ {‚Ñìa : Level} {A : Type ‚Ñìa} where
  Pa : Quiver-on (Œª _ ‚Üí A)
  Pa .Quiver-on.‚Ñì-hom = _
  Pa .Quiver-on.Hom = _Ôºù_

  Sq : ‚Ñöuiver-on (Œª _ ‚Üí A)
  Sq .‚Ñöuiver-on.‚Ñì-hom‚ñ° = _
  Sq .‚Ñöuiver-on.Hom‚Çï = _Ôºù_
  Sq .‚Ñöuiver-on.Hom·µ• = _Ôºù_
  Sq .‚Ñöuiver-on.Hom‚ñ° p q r s = Path·¥æ (Œª i ‚Üí q i Ôºù r i) p s

  instance
    pare : Refl (Œª _ ‚Üí A) _Ôºù_
    pare .Refl.refl {x} _ = x

    sqre : ‚Ñùefl (Œª _ ‚Üí A) (Œª p q r s ‚Üí Path·¥æ (Œª i ‚Üí Path A (q i) (r i)) p s)
    sqre .‚Ñùefl.refl‚Çï {f} i _ = f i
    sqre .‚Ñùefl.refl·µ• {f} _ j = f j


module _ {‚Ñìa : Level} {A : Type ‚Ñìa} {x y : A} {p : x Ôºù y} where
  zook : Path·¥æ (Œª i ‚Üí p i Ôºù p i) refl refl
  zook = refl‚Çï

  kooz : p Ôºù p
  kooz = refl·µ•

Fun : ‚àÄ{‚Ñìa ‚Ñìb} ‚Üí Type ‚Ñìa ‚Üí Type ‚Ñìb ‚Üí Type (‚Ñìa l‚äî ‚Ñìb)
Fun A B = A ‚Üí B

Funs : Quiver-on (Œª ‚Ñì ‚Üí Type ‚Ñì)
Funs .Quiver-on.‚Ñì-hom = _
Funs .Quiver-on.Hom = Fun

instance
  Funs-Comp : Comp _ Fun
  Funs-Comp .Comp._‚àô_ f g x = g (f x)

  Funs-Assoc : Assoc _ Fun _Ôºù_
  Funs-Assoc .Assoc.assoc f g h i x = h (g (f x))

open import Prim.Data.Sigma
Rels : (‚Ñì : Level) ‚Üí Quiver-on (Œª _ ‚Üí Type ‚Ñì)
Rels ‚Ñì .Quiver-on.‚Ñì-hom = _
Rels ‚Ñì .Quiver-on.Hom X Y = Œ£‚Çú (Type ‚Ñì) Œª S ‚Üí (S ‚Üí X) √ó‚Çú (S ‚Üí Y)

-- open import Prim.Equiv
-- instance
--   Rels-Comp : ‚àÄ{‚Ñì} ‚Üí Comp _ (Rels ‚Ñì)
--   Rels-Comp {‚Ñì} .Comp._‚àô_ (R , f , g) (S , h , k) = (Œ£ R (Œª _ ‚Üí S)) , (Œª x‚ÇÅ ‚Üí f (x‚ÇÅ .fst)) , Œª z‚ÇÅ ‚Üí k (z‚ÇÅ .snd)

--   Rels-Assoc : ‚àÄ{‚Ñì} ‚Üí Assoc (Rels ‚Ñì) Œª A B ‚Üí Lift _ {!!}
--   Rels-Assoc .Assoc.assoc f g h .lower = {!!}

module _ where private
  open Quiver-on Funs

  open import Prim.Data.Unit
  kek : Hom ‚ä§‚Çú Type‚ÇÉ
  kek tt = Type‚ÇÇ

  lol : {‚Ñì : Level} ‚Üí Hom ‚ä§‚Çú (Type ‚Ñì)
  lol _ = Lift _ ‚ä§‚Çú

-- module _ {‚Ñì-ob : Level ‚Üí Level} {Ob : ob-sig ‚Ñì-ob} (C : Quiver-on Ob) ‚¶É _ : Comp C ‚¶Ñ where private
--   open Quiver-on C

--   Sqq : ‚Ñöuiver-on Ob
--   Sqq = ?
--   -- Sqq .‚Ñöuiver-on.‚Ñì-sq = _
--   -- Sqq .‚Ñöuiver-on.Quiver‚Çï = C
--   -- Sqq .‚Ñöuiver-on.Quiver·µ• = C
--   -- Sqq .‚Ñöuiver-on.Hom‚ñ° f g h k = f ‚àô h Ôºù g ‚àô k

module DoubleCat {‚Ñì-ob : ‚Ñì-ob-sig} {Ob : ob-sig ‚Ñì-ob} (C : ‚Ñöuiver-on Ob) where private
  open ‚Ñöuiver-on C

  record WildDoubleCat : Typeœâ where
    no-eta-equality
    field
      r·µ• : Refl _ Hom·µ•
      c·µ• : Comp _ Hom·µ•
      unit-l·µ• : Unit-i _ Hom·µ• ‚¶É r·µ• ‚¶Ñ ‚¶É c·µ• ‚¶Ñ _Ôºù_
      unit-r·µ• : Unit-o _ Hom·µ• ‚¶É r·µ• ‚¶Ñ ‚¶É c·µ• ‚¶Ñ _Ôºù_
      assoc·µ• : Assoc _ Hom·µ• ‚¶É c·µ• ‚¶Ñ _Ôºù_

      r‚Çï : Refl _ Hom‚Çï
      c‚Çï : Comp _ Hom‚Çï
      Œª‚Çï : Unit-i _ Hom‚Çï ‚¶É r‚Çï ‚¶Ñ ‚¶É c‚Çï ‚¶Ñ Œª f g ‚Üí Hom‚ñ° f (refl ‚¶É r·µ• ‚¶Ñ) (refl ‚¶É r·µ• ‚¶Ñ) g
      œÅ‚Çï : Unit-o _ Hom‚Çï ‚¶É r‚Çï ‚¶Ñ ‚¶É c‚Çï ‚¶Ñ Œª f g ‚Üí Hom‚ñ° f (refl ‚¶É r·µ• ‚¶Ñ) (refl ‚¶É r·µ• ‚¶Ñ) g
      Œ±‚Çï : Assoc _ Hom‚Çï ‚¶É c‚Çï ‚¶Ñ Œª f g ‚Üí Hom‚ñ° f (refl ‚¶É r·µ• ‚¶Ñ) (refl ‚¶É r·µ• ‚¶Ñ) g

      r‚ñ°  : ‚Ñùefl _ ‚¶É r‚Çï ‚¶Ñ ‚¶É r·µ• ‚¶Ñ Hom‚ñ°
      c‚ñ°  : ‚ÑÇomp _ ‚¶É c‚Çï ‚¶Ñ ‚¶É c·µ• ‚¶Ñ Hom‚ñ°
      ic‚ñ° : ùïÄnterchange _ ‚¶É c‚Çï ‚¶Ñ ‚¶É c·µ• ‚¶Ñ Hom‚ñ° ‚¶É c‚ñ° ‚¶Ñ _Ôºù_
