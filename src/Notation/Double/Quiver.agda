{-# OPTIONS --safe #-}
module Notation.Double.Quiver where

open import Prim.Type

open import Notation.Quiver

‚Ñì-square-sig = Level ‚Üí Level ‚Üí Level ‚Üí Level ‚Üí Level

--         f
--    W----|--->X
--    |         |
--  g |    Œ±    | h
--    v         v
--    Y----|--->Z
--         k
square-sig
  : {‚Ñì-ob : ‚Ñì-ob-sig} (Ob : ob-sig ‚Ñì-ob)
    {‚Ñì-hom‚Çï : ‚Ñì-hom-sig} (Hom‚Çï : hom-sig Ob ‚Ñì-hom‚Çï)
    {‚Ñì-hom·µ• : ‚Ñì-hom-sig} (Hom·µ• : hom-sig Ob ‚Ñì-hom·µ•)
  ‚Üí (‚Ñì-hom‚ñ° : ‚Ñì-square-sig) ‚Üí Typeœâ
square-sig Ob Hom‚Çï Hom·µ• ‚Ñì-hom‚ñ°
  = {‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz : Level} {W : Ob ‚Ñìw} {X : Ob ‚Ñìx} (f : Hom‚Çï W X)
    {Y : Ob ‚Ñìy} (g : Hom·µ• W Y) {Z : Ob ‚Ñìz} (h : Hom·µ• X Z) (k : Hom‚Çï Y Z)
  ‚Üí Type (‚Ñì-hom‚ñ° ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz)
{-# INLINE square-sig #-}

‚Ñì-hom‚Çï : ‚Ñì-square-sig ‚Üí ‚Ñì-hom-sig
‚Ñì-hom‚Çï ‚Ñì-hom‚ñ° ‚Ñìx ‚Ñìy = ‚Ñì-hom‚ñ° ‚Ñìx ‚Ñìy ‚Ñìx ‚Ñìy

‚Ñì-hom·µ• : ‚Ñì-square-sig ‚Üí ‚Ñì-hom-sig
‚Ñì-hom·µ• ‚Ñì-hom‚ñ° ‚Ñìx ‚Ñìy = ‚Ñì-hom‚ñ° ‚Ñìx ‚Ñìx ‚Ñìy ‚Ñìy

-- tight arrows are vertical, loose proarrows are horizontal
record ‚Ñöuiver-on {‚Ñì-ob : ‚Ñì-ob-sig} (Ob : ob-sig ‚Ñì-ob) : Typeœâ where
  constructor mk-ùï¢uiver
  no-eta-equality
  field {‚Ñì-hom‚ñ°} : ‚Ñì-square-sig

  field
    Hom‚Çï : hom-sig Ob (‚Ñì-hom‚Çï ‚Ñì-hom‚ñ°)
    Hom·µ• : hom-sig Ob (‚Ñì-hom·µ• ‚Ñì-hom‚ñ°)
    Hom‚ñ° : square-sig Ob Hom‚Çï Hom·µ• ‚Ñì-hom‚ñ°

  Quiver‚Çï : Quiver-on Ob
  Quiver‚Çï .Quiver-on.‚Ñì-hom = ‚Ñì-hom‚Çï ‚Ñì-hom‚ñ°
  Quiver‚Çï .Quiver-on.Hom = Hom‚Çï

  Quiver·µ• : Quiver-on Ob
  Quiver·µ• .Quiver-on.‚Ñì-hom = ‚Ñì-hom·µ• ‚Ñì-hom‚ñ°
  Quiver·µ• .Quiver-on.Hom = Hom·µ•
