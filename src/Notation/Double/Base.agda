{-# OPTIONS --safe #-}
module Notation.Double.Base where

open import Prim.Type

open import Notation.Base

‚Ñì-sq-sig = Level ‚Üí Level ‚Üí Level ‚Üí Level ‚Üí Level

--         f
--    W----|--->X
--    |         |
--  g |    Œ±    | h
--    v         v
--    Y----|--->Z
--         k
sq-sig
  : {‚Ñì-ob : ‚Ñì-ob-sig} (Ob : ob-sig ‚Ñì-ob)
    {‚Ñì-hor : ‚Ñì-hom-sig} (Hor : hom-sig Ob ‚Ñì-hor)
    {‚Ñì-ver : ‚Ñì-hom-sig} (Ver : hom-sig Ob ‚Ñì-ver)
  ‚Üí (‚Ñì-sq : ‚Ñì-sq-sig) ‚Üí Typeœâ
sq-sig Ob Hor Ver ‚Ñì-sq
  = ‚àÄ{‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz} {W : Ob ‚Ñìw} {X : Ob ‚Ñìx} (f : Hor W X)
    {Y : Ob ‚Ñìy} (g : Ver W Y) {Z : Ob ‚Ñìz} (h : Ver X Z) (k : Hor Y Z)
  ‚Üí Type (‚Ñì-sq ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz)
{-# INLINE sq-sig #-}

‚Ñì-hor : ‚Ñì-sq-sig ‚Üí ‚Ñì-hom-sig
‚Ñì-hor ‚Ñì-sq ‚Ñìx ‚Ñìy = ‚Ñì-sq ‚Ñìx ‚Ñìy ‚Ñìx ‚Ñìy
{-# NOINLINE ‚Ñì-hor #-}

‚Ñì-ver : ‚Ñì-sq-sig ‚Üí ‚Ñì-hom-sig
‚Ñì-ver ‚Ñì-sq ‚Ñìx ‚Ñìy = ‚Ñì-sq ‚Ñìx ‚Ñìx ‚Ñìy ‚Ñìy
{-# NOINLINE ‚Ñì-ver #-}

-- tight arrows are vertical, loose proarrows are horizontal
record ‚Ñöuiver-on {‚Ñì-ob : ‚Ñì-ob-sig} (Ob : ob-sig ‚Ñì-ob) (‚Ñì-sq : ‚Ñì-sq-sig): Typeœâ where
  constructor mk-ùï¢uiver
  no-eta-equality
  field
    Quiver‚Çï : Quiver-on Ob (‚Ñì-hor ‚Ñì-sq)
    Quiver·µ• : Quiver-on Ob (‚Ñì-ver ‚Ñì-sq)

  open Quiver-on Quiver‚Çï renaming (Hom to Hor) public
  open Quiver-on Quiver·µ• renaming (Hom to Ver) public

  field Sq : sq-sig Ob Hor Ver ‚Ñì-sq


-- TODO
-- 2-sq-sig : ?
-- 2-sq-sig Ob = {‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz : Level} {w : Ob ‚Ñìw} {x : Ob ‚Ñìx} {f : Hor w x} {y : Ob ‚Ñìy} {g : Ver w y} {z : Ob ‚Ñìz} {h : Ver x z} {k : Hor y z} (Œ± Œ≤ : Sq f g h k) ‚Üí Type (‚Ñì-sq ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz)
