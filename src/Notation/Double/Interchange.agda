{-# OPTIONS --safe #-}
module Notation.Double.Interchange where

open import Prim.Type

open import Notation.Composition
open import Notation.Double.Composition
open import Notation.Double.Quiver
open import Notation.Quiver

module _ {‚Ñì-ob : ‚Ñì-ob-sig} (Ob : ob-sig ‚Ñì-ob) {‚Ñì-hom‚ñ° : ‚Ñì-square-sig}
  {Hom‚Çï : hom-sig Ob (‚Ñì-hom‚Çï ‚Ñì-hom‚ñ°)} ‚¶É _ : Comp Ob Hom‚Çï ‚¶Ñ
  {Hom·µ• : hom-sig Ob (‚Ñì-hom·µ• ‚Ñì-hom‚ñ°)} ‚¶É _ : Comp Ob Hom·µ• ‚¶Ñ
  (Hom‚ñ° : square-sig Ob Hom‚Çï Hom·µ• ‚Ñì-hom‚ñ°) ‚¶É _ : ‚ÑÇomp Ob Hom‚ñ° ‚¶Ñ
  (_~_ : {‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz : Level} {w : Ob ‚Ñìw} {x : Ob ‚Ñìx} {f : Hom‚Çï w x} {y : Ob ‚Ñìy} {g : Hom·µ• w y} {z : Ob ‚Ñìz} {h : Hom·µ• x z} {k : Hom‚Çï y z} (Œ± Œ≤ : Hom‚ñ° f g h k) ‚Üí Type (‚Ñì-hom‚ñ° ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz)) where

  record ùïÄnterchange : Typeœâ where
    no-eta-equality
    field
      interchange : {‚Ñìa ‚Ñìb ‚Ñìc ‚Ñìd ‚Ñìe ‚Ñìf ‚Ñìg ‚Ñìh ‚Ñìk : Level}
                    {A : Ob ‚Ñìa} {B : Ob ‚Ñìb} {f : Hom‚Çï A B} {C : Ob ‚Ñìc} {g : Hom·µ• A C} {D : Ob ‚Ñìd}
                    {h : Hom·µ• B D} {k : Hom‚Çï C D} (Œ± : Hom‚ñ° f g h k)
                    {E : Ob ‚Ñìe} {l : Hom‚Çï B E} {F : Ob ‚Ñìf}
                    {m : Hom·µ• E F} {n : Hom‚Çï D F} (Œ≤ : Hom‚ñ° l h m n)
                    {G : Ob ‚Ñìg} {o : Hom·µ• C G} {H : Ob ‚Ñìh}
                    {p : Hom·µ• D H} {q : Hom‚Çï G H} (Œ≥ : Hom‚ñ° k o p q)
                    {K : Ob ‚Ñìk} {r : Hom·µ• F K} {s : Hom‚Çï H K} (Œ¥ : Hom‚ñ° n p r s)
                  ‚Üí (Œ± ‚àô·µ• Œ≥) ‚àô‚Çï (Œ≤ ‚àô·µ• Œ¥) ~ (Œ± ‚àô‚Çï Œ≤) ‚àô·µ• (Œ≥ ‚àô‚Çï Œ¥)

open ùïÄnterchange ‚¶É ... ‚¶Ñ public

{-# DISPLAY ùïÄnterchange.interchange _ Œ± Œ≤ Œ≥ Œ¥ = interchange Œ± Œ≤ Œ≥ Œ¥ #-}
