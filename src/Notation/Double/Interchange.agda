{-# OPTIONS --safe #-}
module Notation.Double.Interchange where

open import Prim.Type

open import Notation.Base
open import Notation.Composition
open import Notation.Double.Base
open import Notation.Double.Composition

module _ {‚Ñì-ob : ‚Ñì-ob-sig} {Ob : ob-sig ‚Ñì-ob} {‚Ñì-sq : ‚Ñì-sq-sig}
  (C : ‚Ñöuiver-on Ob ‚Ñì-sq) (open ‚Ñöuiver-on C)
  ‚¶É _ : Compœâ Quiver‚Çï ‚¶Ñ ‚¶É _ : Compœâ Quiver·µ• ‚¶Ñ ‚¶É _ : ‚àÄ{‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz ‚Ñìu ‚Ñìv} ‚Üí ‚ÑÇomp C ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz ‚Ñìu ‚Ñìv ‚¶Ñ
  (_~_ : ‚àÄ{‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz} {w : Ob ‚Ñìw} {x : Ob ‚Ñìx} {f : Hor w x} {y : Ob ‚Ñìy} {g : Ver w y} {z : Ob ‚Ñìz} {h : Ver x z} {k : Hor y z} (Œ± Œ≤ : Sq f g h k) ‚Üí Type (‚Ñì-sq ‚Ñìw ‚Ñìx ‚Ñìy ‚Ñìz)) where
  -- ^ TODO 2-sq-sig

  record ùïÄnterchange : Typeœâ where
    no-eta-equality
    field
      interchange : {‚Ñìa ‚Ñìb ‚Ñìc ‚Ñìd ‚Ñìe ‚Ñìf ‚Ñìg ‚Ñìh ‚Ñìk : Level}
                    {A : Ob ‚Ñìa} {B : Ob ‚Ñìb} {f : Hor A B} {C : Ob ‚Ñìc} {g : Ver A C} {D : Ob ‚Ñìd}
                    {h : Ver B D} {k : Hor C D} (Œ± : Sq f g h k)
                    {E : Ob ‚Ñìe} {l : Hor B E} {F : Ob ‚Ñìf}
                    {m : Ver E F} {n : Hor D F} (Œ≤ : Sq l h m n)
                    {G : Ob ‚Ñìg} {o : Ver C G} {H : Ob ‚Ñìh}
                    {p : Ver D H} {q : Hor G H} (Œ≥ : Sq k o p q)
                    {K : Ob ‚Ñìk} {r : Ver F K} {s : Hor H K} (Œ¥ : Sq n p r s)
                  ‚Üí (Œ± ‚àô·µ• Œ≥) ‚àô‚Çï (Œ≤ ‚àô·µ• Œ¥) ~ (Œ± ‚àô‚Çï Œ≤) ‚àô·µ• (Œ≥ ‚àô‚Çï Œ¥)

open ùïÄnterchange ‚¶É ... ‚¶Ñ public

{-# DISPLAY ùïÄnterchange.interchange _ Œ± Œ≤ Œ≥ Œ¥ = interchange Œ± Œ≤ Œ≥ Œ¥ #-}
